Задания с собеседования на позицию Middle Backend разработчика с примерами на
Python

Когда вы собеседуете разработчика на позицию Middle и выше, то задавать на
собеседовании простые задачи на совсем базовые знания языка не следует. Важнее
понять, насколько данный разработчик может самостоятельно работать, как мыслит и
 рассуждает, какие вопросы задает и насколько хорошо умеет выбирать технологию
или подход для решения поставленной задачи. Соответственно, некоторые задачи,
которые мы рассмотрим ниже, могут иметь несколько правильных решений, при этом
интервьюер может скорректировать условия задачи так, чтобы проверить те или иные
 знания кандидата. Ниже приведены некоторые реальные задачи из собеседований на
Python разработчика в SUNLIGHT (highload проект с более чем 1 млн сессий в
день).

Ваша компания отправляет СМС с трекинговой ссылкой, но ссылка достаточно длинная
 и из-за этого СМС выходит за 70 символов (длина 1 СМС). Необходимо
спроектировать сервис-«укорачиватель ссылок», чтобы сэкономить деньги компании.
Интервьюер при этом выступает заказчиком со стороны бизнеса и ему можно задавать
 вопросы по сути задачи.

Задача хороша тем, что в нее можно углубляться по нескольким направлениям и
оценить сразу несколько скиллов кандидата, а также глубину проработки (по сути
его опыт), причём даже если он её уже решал (а многие действительно это делали).
 Основные направления обсуждения:

Загрузка из «плохого» API большого количества данных и их синхронизация с
табличкой в БД (например, Postgres). Считаем, что на входе мы скачиваем
JSON-массив из N (>100k) объектов (dict) заданной структуры (primary key поле +
некоторое количество строковых полей). Считаем, что нам надо раз в некоторое
время запускать функцию, которая создаст записи, которые есть в JSON, но их нет
в базе, а далее обновит строковые поля там, где что-то поменялось, и пометить
удаленными записи, которых нет в JSON, но они все еще есть в базе.

Есть 3 простых решения. Первое — просто перебрать записи из JSON, выбирая из
базы записи по одной по pk, но тогда мы получим N запросов в базу, что может
приводить к неконтролируемой пиковой нагрузке. Второе — выбрать из базы
полностью таблицу и сравнить 2 массива, что будет работать, скорее всего,
быстрее других вариантов, но будет максимально неэффективно по памяти (упрощаем
решение задачи выделением дополнительных ресурсов, но, опять же, есть
вероятность, что из-за неожиданно большого объема данных памяти может не хватить
 и выполнение таска прервется). Компромиссный вариант по производительности,
нагрузке на базу и памяти — проходить циклом по JSON (или записям базы, но там
есть нюансы) бачами по 100-1000 шт., накапливая обработанные id. Это сократит
количество запросов на 2-3 порядка, не потребует загрузки в память всех текущих
данных, но при этом будет всё ещё достаточно быстро. Также тут можно обсудить
варианты реализации чисто средствами базы (временные таблицы, bulk upsert-ы и
т.д.)

Набросать код, который будет рассчитывать угол между часовой и минутной стрелкой
 в заданное время. Данная задача покажет логическое мышление кандидата, и как
быстро он сможет придумать решение.

Что такое итераторы/генераторы/генераторные выражения, чем они отличаются и
когда и как все это нужно использовать.

Здесь важно, чтобы кандидат понимал различие и мог с той или иной степенью
погружения рассказать про эти различия. Если кратко, то итератор в Python – это
любой объект, который использует метод next() для получения следующего значения
последовательности. Генератор – функция, которая производит или выдает
последовательность значений с использованием метода yield. Концептуально,
итератор — это механизм поэлементного обхода данных, а генератор позволяет
отложено создавать результат при итерации. Генератор может создавать результат
на основе какого-то алгоритма или брать элементы из источника данных (коллекция,
 файлы, сетевое подключения и др.) и изменять их.

Подробности доступны в очень большом количестве статей с той или иной степенью
погружения в детали, например, здесь [https://habr.com/ru/post/337314/.]

Серия вопросов по СУБД (в частности Postgres). По всем пунктам можно погрузиться
 в достаточно низкоуровневые детали реализации, но важно и в целом оценить
осведомленность кандидата об основных принципах работы базы, достаточных для
большинства задач.

***

Что такое транзакция? Приведите пример, где это может пригодиться. Расскажите
про свойства транзакций и уровень изолированности.

Транзакция объединяет последовательность действий в одну операцию и обеспечивает
 выполнение либо всех действий из последовательности, либо ни одного.
Канонический пример — списывание денег с одного счета и зачисление на другой,
что требует два update-а, которые гарантированно должны выполниться или не
выполниться вместе.

Что такое server side cursor и зачем он нужен?

Способ работы с результатом запроса в базу данных, который позволяет не
загружать весь объем данных в память, позволяет работать с большими объемами
данных. Дополнительно углубленно можно поговорить про особенности работы в
связке с pgbouncer.

Что такое VACUUM и зачем он нужен в PostgreSQL?

Команда VACUUM высвобождает пространство, занимаемое «мертвыми» кортежами, что
актуально для часто используемых таблиц. При обычных операциях в Postgres
кортежи, удаленные или устаревшие в результаты обновления, физически не
удаляются, а сохраняются в таблице до очистки.

Что такое EXPLAIN? Какая разница между ним и EXPLAIN ANALYZE?

EXPLAIN ANALYZE – в отличие от просто EXPLAIN не только показывает план
выполнения запроса, но и непосредственно выполняет запрос и показывает реальное
время выполнения





